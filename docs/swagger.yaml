definitions:
  dto.BilingualField:
    properties:
      en:
        type: string
      th:
        type: string
    type: object
  dto.CallbackErrorResponse:
    properties:
      instance:
        example: /auth/callback
        type: string
      title:
        example: internal-server-error
        type: string
    type: object
  dto.CallbackInvalidResponse:
    properties:
      instance:
        example: /auth/callback
        type: string
      title:
        example: bad-request
        type: string
    type: object
  dto.CallbackResponse:
    properties:
      token:
        example: gbxnZjiHVzb_4mDQTQNiJdrZFOCactWXkZvZOxS2_qZsy7vAQY7uA2RFIHe2JABoEjhT0Y3KlOJuOEvE2YJMLrJDagwhpAITGex
        type: string
    type: object
  dto.Department:
    properties:
      code:
        example: "21"
        type: string
      name:
        $ref: '#/definitions/dto.BilingualField'
    type: object
  dto.DesiredRound:
    properties:
      order:
        example: 1
        type: integer
      round:
        example: "1"
        type: string
    type: object
  dto.Event:
    properties:
      department:
        $ref: '#/definitions/dto.Department'
      description:
        $ref: '#/definitions/dto.BilingualField'
      faculty:
        $ref: '#/definitions/dto.Faculty'
      id:
        example: first-event
        type: string
      location:
        $ref: '#/definitions/dto.BilingualField'
      max_capacity:
        example: 100
        type: integer
      name:
        $ref: '#/definitions/dto.BilingualField'
      require_registration:
        example: true
        type: boolean
      schedules:
        items:
          $ref: '#/definitions/dto.Schedule'
        type: array
    type: object
  dto.EventAllErrorResponse:
    properties:
      instance:
        example: /events
        type: string
      title:
        example: internal-server-error
        type: string
    type: object
  dto.EventErrorResponse:
    properties:
      instance:
        example: /events/:eventId
        type: string
      title:
        example: internal-server-error
        type: string
    type: object
  dto.EventInvalidResponse:
    properties:
      instance:
        example: /events/:eventId
        type: string
      title:
        example: invalid-event-id
        type: string
    type: object
  dto.Faculty:
    properties:
      code:
        example: "21"
        type: string
      name:
        $ref: '#/definitions/dto.BilingualField'
    type: object
  dto.FacultyInfo:
    properties:
      department:
        properties:
          code:
            type: string
          name:
            $ref: '#/definitions/dto.BilingualField'
        type: object
      faculty:
        properties:
          code:
            type: string
          name:
            $ref: '#/definitions/dto.BilingualField'
        type: object
      section:
        properties:
          code:
            type: string
          name:
            $ref: '#/definitions/dto.BilingualField'
        type: object
    type: object
  dto.FacultyInfoId:
    properties:
      department_code:
        example: "10"
        type: string
      faculty_code:
        example: "21"
        type: string
      order:
        example: 1
        type: integer
      section_code:
        example: '-'
        type: string
    type: object
  dto.GetAllEventResponse:
    properties:
      events:
        items:
          $ref: '#/definitions/dto.Event'
        type: array
    type: object
  dto.GetEventByIdResponse:
    properties:
      event:
        $ref: '#/definitions/dto.Event'
    type: object
  dto.GetProfileErrorResponse:
    properties:
      instance:
        example: /auth/me
        type: string
      title:
        example: internal-server-error
        type: string
    type: object
  dto.GetProfileResponse:
    properties:
      user:
        $ref: '#/definitions/dto.User'
    type: object
  dto.GetProfileUnauthorized:
    properties:
      instance:
        example: /auth/me
        type: string
      title:
        example: unauthorized
        type: string
    type: object
  dto.GetProfileUserNotFound:
    properties:
      instance:
        example: /auth/me
        type: string
      title:
        example: user-not-found
        type: string
    type: object
  dto.RegisterErrorResponse:
    properties:
      instance:
        example: /auth/register
        type: string
      title:
        example: internal-server-error
        type: string
    type: object
  dto.RegisterInvalidResponse:
    properties:
      instance:
        example: /auth/register
        type: string
      title:
        example: bad-request
        type: string
    type: object
  dto.RegisterInvalidToken:
    properties:
      instance:
        example: /auth/register
        type: string
      title:
        example: invalid-token
        type: string
    type: object
  dto.RegisterRequestDTO:
    properties:
      address:
        example: Bangkok
        type: string
      allergy:
        example: None
        type: string
      birth_date:
        example: "1990-01-01"
        type: string
      desired_rounds:
        items:
          $ref: '#/definitions/dto.DesiredRound'
        type: array
      first_name:
        example: John
        type: string
      from_abroad:
        example: "no"
        type: string
      gender:
        example: male
        type: string
      grade:
        example: undergraduate
        type: string
      interested_faculties:
        items:
          $ref: '#/definitions/dto.FacultyInfoId'
        type: array
      join_cu_reason:
        example: Interested in the programs offered
        type: string
      last_name:
        example: Doe
        type: string
      medical_condition:
        example: None
        type: string
      news_source:
        example: Facebook
        type: string
      school:
        example: CU
        type: string
      status:
        example: student
        type: string
    type: object
  dto.RegisterResponse:
    properties:
      user:
        $ref: '#/definitions/dto.User'
    type: object
  dto.RegisterUnauthorized:
    properties:
      instance:
        example: /auth/register
        type: string
      title:
        example: unauthorized
        type: string
    type: object
  dto.Schedule:
    properties:
      current_attendee:
        example: 83
        type: integer
      ends_at:
        example: "2021-08-01T00:00:00+07:00"
        type: string
      id:
        example: 5
        type: integer
      period:
        example: 20-morning
        type: string
      starts_at:
        example: "2021-08-01T00:00:00+07:00"
        type: string
    type: object
  dto.User:
    properties:
      address:
        example: Bangkok
        type: string
      allergy:
        example: None
        type: string
      birth_date:
        example: "1990-01-01"
        type: string
      desired_rounds:
        items:
          $ref: '#/definitions/dto.DesiredRound'
        type: array
      first_name:
        example: John
        type: string
      from_abroad:
        example: "no"
        type: string
      gender:
        example: male
        type: string
      grade:
        example: undergraduate
        type: string
      interested_faculties:
        items:
          $ref: '#/definitions/dto.FacultyInfo'
        type: array
      join_cu_reason:
        example: Interested in the programs offered
        type: string
      last_name:
        example: Doe
        type: string
      medical_condition:
        example: None
        type: string
      news_source:
        example: Facebook
        type: string
      registered_events:
        items:
          $ref: '#/definitions/dto.Schedule'
        type: array
      school:
        example: CU
        type: string
      status:
        example: student
        type: string
    type: object
  dto.errorResponse:
    properties:
      instance:
        example: /featureflag/live
        type: string
      title:
        example: internal-server-error
        type: string
    type: object
  dto.invalidResponse:
    properties:
      instance:
        example: /featureflag/live
        type: string
      title:
        example: invalid-feature-flag-key
        type: string
    type: object
  dto.response:
    properties:
      enabled:
        example: true
        type: boolean
      extra_info:
        example: https://www.youtube.com/watch?v=6n3pFFPSlW4
        type: string
      key:
        example: livestream
        type: string
    type: object
info:
  contact: {}
  description: Documentation outlines the specifications and endpoints for the OPH-66
    Backend API.
  title: OPH-66 Backend API
  version: "1.0"
paths:
  /_hc:
    get:
      description: Health Check for the service
      operationId: HealthCheck
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - Bearer: []
      summary: Health Check
      tags:
      - healthcheck
  /auth/callback:
    get:
      description: After successfully logging in with a @chula account, you'll receive
        a token. If you attempt to log in using a different domain, Google will not
        allow the login
      operationId: GoogleCallback
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CallbackResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.CallbackInvalidResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.CallbackErrorResponse'
      summary: receive a token after successfully login with Google
      tags:
      - auth
  /auth/login:
    get:
      description: Redirect to Google login page
      operationId: GoogleLogin
      produces:
      - application/json
      responses: {}
      summary: Redirect to Google login page
      tags:
      - auth
  /auth/me:
    get:
      description: Get Profile of current user
      operationId: GetProfile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.GetProfileUnauthorized'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.GetProfileUserNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.GetProfileErrorResponse'
      security:
      - Bearer: []
      summary: Get Profile of current user
      tags:
      - auth
  /auth/register:
    post:
      description: Register new account with email
      operationId: Register
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RegisterResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.RegisterUnauthorized'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.RegisterInvalidResponse'
        "498":
          description: ""
          schema:
            $ref: '#/definitions/dto.RegisterInvalidToken'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.RegisterErrorResponse'
      security:
      - Bearer: []
      summary: Register
      tags:
      - auth
  /events:
    get:
      description: Get all events as array of events
      operationId: GetAllEvents
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetAllEventResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.EventInvalidResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.EventAllErrorResponse'
      summary: Get all events
      tags:
      - event
  /events/{eventId}:
    get:
      description: Get event by id
      operationId: GetEventById
      parameters:
      - description: event id
        in: path
        name: eventId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetEventByIdResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.EventInvalidResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.EventErrorResponse'
      summary: get event by id
      tags:
      - event
  /live:
    get:
      description: Get livestream flag
      operationId: GetLivestreamInfo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.invalidResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.errorResponse'
      summary: Get livestream flag
      tags:
      - FeatureFlag
  /schedules/{scheduleId}/register:
    post:
      description: Register event
      operationId: RegisterEvent
      parameters:
      - description: schedule id
        in: path
        name: scheduleId
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Register event
      tags:
      - event
schemes:
- http
- https
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
