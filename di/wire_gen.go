// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/isd-sgcu/oph66-backend/cache"
	"github.com/isd-sgcu/oph66-backend/cfgldr"
	"github.com/isd-sgcu/oph66-backend/database"
	"github.com/isd-sgcu/oph66-backend/internal/feature_flag"
	"github.com/isd-sgcu/oph66-backend/internal/health_check"
	"github.com/isd-sgcu/oph66-backend/internal/login"
	"github.com/isd-sgcu/oph66-backend/internal/register"
	"github.com/isd-sgcu/oph66-backend/logger"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func Init() (Container, error) {
	handler := healthcheck.NewHandler()
	config, err := cfgldr.LoadConfig()
	if err != nil {
		return Container{}, err
	}
	db, err := database.New(config)
	if err != nil {
		return Container{}, err
	}
	repository := featureflag.NewRepository(db)
	client, err := cache.New(config)
	if err != nil {
		return Container{}, err
	}
	zapLogger := logger.InitLogger(config)
	service := featureflag.NewService(repository, client, zapLogger)
	featureflagHandler := featureflag.NewHandler(service)
	registerRepository := register.NewRepository(db)
	registerService := register.NewService(registerRepository)
	registerHandler := register.NewHandler(registerService)
	loginRepository := login.NewRepository(db)
	loginService := login.NewService(loginRepository)
	loginHandler := login.NewHandler(loginService)
	container := newContainer(handler, featureflagHandler, registerHandler, loginHandler, config, zapLogger)
	return container, nil
}

// wire.go:

type Container struct {
	HcHandler          healthcheck.Handler
	FeatureflagHandler featureflag.Handler
	RegisterHandler    register.Handler
	LoginHandler       login.Handler
	Config             *cfgldr.Config
	Logger             *zap.Logger
}

func newContainer(hcHandler healthcheck.Handler, featureflagHandler featureflag.Handler, RegisterHandler register.Handler, LoginHandler login.Handler, config *cfgldr.Config, logger2 *zap.Logger) Container {
	return Container{
		hcHandler,
		featureflagHandler,
		RegisterHandler,
		LoginHandler,
		config, logger2,
	}
}
