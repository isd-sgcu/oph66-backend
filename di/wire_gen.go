// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/isd-sgcu/oph66-backend/cache"
	"github.com/isd-sgcu/oph66-backend/cfgldr"
	"github.com/isd-sgcu/oph66-backend/database"
	"github.com/isd-sgcu/oph66-backend/internal/auth"
	"github.com/isd-sgcu/oph66-backend/internal/event"
	"github.com/isd-sgcu/oph66-backend/internal/evtreg"
	"github.com/isd-sgcu/oph66-backend/internal/feature_flag"
	"github.com/isd-sgcu/oph66-backend/internal/health_check"
	"github.com/isd-sgcu/oph66-backend/internal/middleware"
	"github.com/isd-sgcu/oph66-backend/internal/router"
	"github.com/isd-sgcu/oph66-backend/internal/staff"
	"github.com/isd-sgcu/oph66-backend/logger"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func Init() (Container, error) {
	config, err := cfgldr.LoadConfig()
	if err != nil {
		return Container{}, err
	}
	db, err := database.New(config)
	if err != nil {
		return Container{}, err
	}
	repository := event.NewRepository(db)
	zapLogger := logger.InitLogger(config)
	service := event.NewService(repository, zapLogger)
	client, err := cache.New(config)
	if err != nil {
		return Container{}, err
	}
	eventCache := event.NewCache(client, zapLogger)
	handler := event.NewHandler(service, eventCache, zapLogger)
	healthcheckHandler := healthcheck.NewHandler()
	featureflagRepository := featureflag.NewRepository(db)
	featureflagService := featureflag.NewService(featureflagRepository, zapLogger)
	featureflagCache := featureflag.NewCache(client, zapLogger)
	featureflagHandler := featureflag.NewHandler(featureflagService, featureflagCache)
	authRepository := auth.NewRepository(db)
	authService := auth.NewService(authRepository, zapLogger, config)
	authHandler := auth.NewHandler(authService, zapLogger)
	evtregRepository := evtreg.NewRepository(db)
	evtregService := evtreg.NewService(zapLogger, evtregRepository, eventCache)
	evtregHandler := evtreg.NewHandler(evtregService)
	staffRepository := staff.NewRepository(db)
	staffService := staff.NewService(staffRepository, authRepository, zapLogger)
	staffHandler := staff.NewHandler(staffService, zapLogger)
	corsHandler := cfgldr.MakeCorsConfig(config)
	authMiddleware := middleware.NewAuthMiddleware(authRepository, config)
	routerRouter := router.NewRouter(config, corsHandler, authMiddleware)
	container := newContainer(handler, healthcheckHandler, featureflagHandler, authHandler, evtregHandler, staffHandler, config, zapLogger, corsHandler, routerRouter)
	return container, nil
}

// wire.go:

type Container struct {
	EventHandler       event.Handler
	HcHandler          healthcheck.Handler
	FeatureflagHandler featureflag.Handler
	AuthHandler        auth.Handler
	EvtregHandler      evtreg.Handler
	StaffHandler       staff.Handler
	Config             *cfgldr.Config
	Logger             *zap.Logger
	CorsHandler        cfgldr.CorsHandler
	Router             *router.Router
}

func newContainer(
	eventHandler event.Handler,
	hcHandler healthcheck.Handler,
	featureflagHandler featureflag.Handler,
	authHandler auth.Handler,
	evtregHandler evtreg.Handler,
	staffHandler staff.Handler,
	config *cfgldr.Config, logger2 *zap.Logger,
	corsHandler cfgldr.CorsHandler, router2 *router.Router,
) Container {
	return Container{
		eventHandler,
		hcHandler,
		featureflagHandler,
		authHandler,
		evtregHandler,
		staffHandler,
		config, logger2, corsHandler, router2,
	}
}
