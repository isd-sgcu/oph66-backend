// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/isd-sgcu/oph66-backend/cache"
	"github.com/isd-sgcu/oph66-backend/cfgldr"
	"github.com/isd-sgcu/oph66-backend/database"
	"github.com/isd-sgcu/oph66-backend/internal/event"
	"github.com/isd-sgcu/oph66-backend/internal/feature_flag"
	"github.com/isd-sgcu/oph66-backend/internal/health_check"
	"github.com/isd-sgcu/oph66-backend/logger"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func Init() (Container, error) {
	config, err := cfgldr.LoadConfig()
	if err != nil {
		return Container{}, err
	}
	db, err := database.New(config)
	if err != nil {
		return Container{}, err
	}
	repository := event.NewRepository(db)
	zapLogger := logger.InitLogger(config)
	service := event.NewService(repository, zapLogger)
	client, err := cache.New(config)
	if err != nil {
		return Container{}, err
	}
	eventCache := event.NewCache(client, zapLogger)
	handler := event.NewHandler(service, eventCache, zapLogger)
	healthcheckHandler := healthcheck.NewHandler()
	featureflagRepository := featureflag.NewRepository(db)
	featureflagService := featureflag.NewService(featureflagRepository, zapLogger)
	featureflagCache := featureflag.NewCache(client, zapLogger)
	featureflagHandler := featureflag.NewHandler(featureflagService, featureflagCache)
	corsHandler := cfgldr.MakeCorsConfig(config)
	container := newContainer(handler, healthcheckHandler, featureflagHandler, config, zapLogger, corsHandler)
	return container, nil
}

// wire.go:

type Container struct {
	EventHandler       event.Handler
	HcHandler          healthcheck.Handler
	FeatureflagHandler featureflag.Handler
	Config             *cfgldr.Config
	Logger             *zap.Logger
	CorsHandler        cfgldr.CorsHandler
}

func newContainer(eventHandler event.Handler, hcHandler healthcheck.Handler, featureflagHandler featureflag.Handler, config *cfgldr.Config, logger2 *zap.Logger, corsHandler cfgldr.CorsHandler) Container {
	return Container{
		eventHandler,
		hcHandler,
		featureflagHandler,
		config, logger2, corsHandler,
	}
}
